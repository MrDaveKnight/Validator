<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_dk_validator.Output</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Output</name>
        <script><![CDATA[var Output = Class.create();
Output.prototype = {
    initialize: function (stats, state) {

        this.stats = stats;
        this.state = state;

        // Staging variables for output/persistence.
        // The datastore field labels match the labels assigned to each metric,
        // and printed out by gs.info below.
        // Keep it that way, and things will continue to work fine.
        // If one of the datastore labels doesn't match one of the results.[...] variable names,
        // create a temporary variable here that does, and we will set it before getting
        // to the DB dump
        this.Result = "Fail";
        this.FileCount = 0;
        this.MethodCount = 0;
        this.ScriptTestCoverage = 0.0;
        this.ScriptedTestRatio = 0.0;
        this.CodelessTestRatio = 0.0;
        this.CommentPercentage = 0.0;
        this.LogPercentage = 0.0;
        this.DebugPercentage = 0.0;
        this.ExceptionPercentage = 0.0;
        this.LibCommentPct = 0.0;
        this.LibLogPct = 0.0;
        this.LibDebugPct = 0.0;
        this.LibExceptionPct = 0.0;
        this.LowCommentPct = 0.0;
        this.LowLogPct = 0.0;
        this.LowDebugPct = 0.0;
        this.LowExceptionPct = 0.0;
        this.ProCommentPct = 0.0;
        this.ProLogPct = 0.0;
        this.ProDebugPct = 0.0;
        this.ProExceptionPct = 0.0;
        this.NumberOfScriptsTested = 0;
        this.ScopedPackagingPct = 0.0;

        // Record count rollups
        this.TotalLogic = 0;
        this.NoCodeLogic = 0;
        this.LowCodeLogic = 0;
        this.ProCodeLogic = 0;
        this.WorkflowLogic = 0;
        this.IntegrationLogic = 0;
        this.PortalLogic = 0;
        this.DiscoveryLogic = 0;
        this.ScopedLogic = 0;
        this.GlobalLogic = 0;
        this.Custom = 0;

        // Temporary rollups for percentage calculations
        this.lowLinesOfCode = 0;
        this.lowCommentChars = 0;
        this.lowCodeChars = 0;
        this.lowLogCount = 0;
        this.lowDebugCount = 0;
        this.lowExceptionCount = 0;
        this.proLinesOfCode = 0;
        this.proCommentChars = 0;
        this.proCodeChars = 0;
        this.proLogCount = 0;
        this.proDebugCount = 0;
        this.proExceptionCount = 0;
        this.libLinesOfCode = 0;
        this.libCommentChars = 0;
        this.libCodeChars = 0;
        this.libLogCount = 0;
        this.libDebugCount = 0;
        this.libExceptionCount = 0;
        this.libFileCount = 0;

        // Configuration records are, by definition, not logic records
        // Some may have some script in them, but they don't define major processes,
        // and are therefore configuration records
        this.TotalConfig = 0;
        this.ScopedConfig = 0;
        this.GlobalConfig = 0;
        this.ScriptedConfig = 0;
        this.SchemaConfig = 0;

        // Priimary application files
        this.ScriptIncludes = 0;
        this.BusinessRules = 0;
        this.GlobalBusinessRules = 0;
        this.ScriptActions = 0;
        this.ScheduledJobs = 0;
        this.DynamicFilters = 0;
        this.Notifications = 0;
        this.InboundEmailActions = 0;
        this.WorkflowActivities = 0;
        this.Relationships = 0;
        this.Processors = 0;
        this.UIMacros = 0;
        this.UIPages = 0;
        this.UIScripts = 0;
        this.ClientScripts = 0;
        this.FixScripts = 0;
        this.DictionaryOverrides = 0;
        this.Dictionary = 0;
        this.TestSteps = 0;
        this.ActiveTests = 0;

        // Tests and Steps
        this.codedTests = 0;
        this.codelessTests = 0;

        // 
        // Calculate rollups
        //

        for (var table_class_name in this.stats.inventory) {

            this.FileCount += this.stats.inventory[table_class_name].count;

            this._tallyPrimaryAppFiles(table_class_name);

            // Tally up wf_activity script counts
            // This needs to be kept in sync with main's declaration of modelsWithScript,
            // And Inspector.examineVariable's switch statement to filter modelsWithScript!
            if (this.stats.inventory.wf_activity) {
                for (var c in this.stats.modelsWithScript.wf_activity) {
                    this.stats.inventory.wf_activity.scripted_count++;
                }
            }

            switch (this.stats.inventory[table_class_name].type) {
                case "NoLowCode":
                    // Record Metrics 
                    this.TotalLogic += this.stats.inventory[table_class_name].count;
                    this.LowCodeLogic += this.stats.inventory[table_class_name].scripted_count;
                    this.NoCodeLogic += (this.stats.inventory[table_class_name].count -
                        this.stats.inventory[table_class_name].scripted_count);
                    if (Catalog.isWorkflowLogicRecord(table_class_name)) {
                        this.WorkflowLogic += this.stats.inventory[table_class_name].count;
                    }
                    this.GlobalLogic += this.stats.inventory[table_class_name].global_count;
                    this.ScopedLogic += (this.stats.inventory[table_class_name].count -
                        this.stats.inventory[table_class_name].global_count);
                    // Script Metrics
                    this.lowLinesOfCode += this.state.stats.inventory[table_class_name].LinesOfCode;
                    this.lowCommentChars += this.state.stats.inventory[table_class_name].commentChars;
                    this.lowCodeChars += this.state.stats.inventory[table_class_name].codeChars;
                    this.lowLogCount += this.state.stats.inventory[table_class_name].logging;
                    this.lowDebugCount += this.state.stats.inventory[table_class_name].debugging;
                    this.lowExceptionCount += this.state.stats.inventory[table_class_name].try_catch;
                    break;
                case "ProCode":
                    // Record Metrics
                    this.TotalLogic += this.stats.inventory[table_class_name].count;
                    this.ProCodeLogic += this.stats.inventory[table_class_name].count;
                    if (Catalog.isIntegrationLogicRecord(table_class_name)) {
                        this.IntegrationLogic += this.stats.inventory[table_class_name].count;
                    }
                    if (Catalog.isPortalLogicRecord(table_class_name)) {
                        this.PortalLogic += this.stats.inventory[table_class_name].count;
                    }
                    if (Catalog.isDiscoveryLogicRecord(table_class_name)) {
                        this.DiscoveryLogic += this.stats.inventory[table_class_name].count;
                    }
                    this.GlobalLogic += this.stats.inventory[table_class_name].global_count;
                    this.ScopedLogic += (this.stats.inventory[table_class_name].count -
                        this.stats.inventory[table_class_name].global_count);
                    // Script Metrics
                    this.proLinesOfCode += this.state.stats.inventory[table_class_name].LinesOfCode;
                    this.proCommentChars += this.state.stats.inventory[table_class_name].commentChars;
                    this.proCodeChars += this.state.stats.inventory[table_class_name].codeChars;
                    this.proLogCount += this.state.stats.inventory[table_class_name].logging;
                    this.proDebugCount += this.state.stats.inventory[table_class_name].debugging;
                    this.proExceptionCount += this.state.stats.inventory[table_class_name].try_catch;
                    break;
                case "Custom":
                    this.Custom += this.stats.inventory[table_class_name].count;
                    break;
                case "Config":
                    this.TotalConfig += this.stats.inventory[table_class_name].count;
                    this.GlobalConfig += this.stats.inventory[table_class_name].global_count;
                    this.ScopedConfig += (this.stats.inventory[table_class_name].count -
                        this.stats.inventory[table_class_name].global_count);
                    this.ScriptedConfig += this.stats.inventory[table_class_name].scripted_count;
                    if (Catalog.isSchemaConfigRecord(table_class_name)) {
                        this.SchemaConfig += this.stats.inventory[table_class_name].count;
                    }
                    break;
                default:
                    gs.error("Bogus inventory detected for " + table_class_name + "!");
                    break;

            }
        }

        // Logic and Config does not include ATF 
        var grandTotal = this.TotalLogic + this.TotalConfig;
        if (grandTotal > 0) {
            this.ScopedPackagingPct = (((this.ScopedLogic + this.ScopedConfig) /
                grandTotal) * 100.0).toFixed(2);
        }

        // Should do this here, but some calculations are being done in _printToLog()
        // FIXME - move those calculations in here so I can call this!
        //this._determineResult();
    },

    run: function () {

        this._printToLog();

        // FIXME - this should be able to happen before print to log! 
        this._determineResult();

        if (gs.tableExists("x_snc_dk_valid_res_metrics")) {
            // The Validator Results app is installed.
            // Save our results to it.
            this._persistToDatabase();
        }

        // Send the results to the central metric repository
        var transmitted = new x_snc_dk_valid_res.Transmitter().sendResults(this.state.resultsGR);
        if (transmitted) {
            this._markTransmitted();
        }

    },

    _printToLog: function () {

        //
        // Human readable
        //

        var targetedMethodCount = 0;
        var testedMethodCount = 0;
        if (this.state.processingPackages) {
            gs.debug("Targeted Methods for ATF Test Execution Statistics");
            gs.debug("--------------------------------------------------------------");
            for (var q in this.state.targets.methods) {
                targetedMethodCount++;
                gs.debug(q);
                if (this.state.targets.methods[q] > 0)
                    testedMethodCount++;
            }
        }

        gs.info("");
        gs.info("Risk Factors");
        gs.info("--------------------------------------------------------------");
        gs.info("FileCount: " + this.FileCount);
        if (this.state.processingPackages) {
            gs.info("MethodCount:" + targetedMethodCount);
            this.MethodCount = targetedMethodCount; // for DB load to come
        }
        gs.info("LinesOfCode:" + this.state.stats.LinesOfCode);
        gs.info("ScriptSize:" + this.state.stats.ScriptSize);

        gs.info("");
        gs.info("Risk Mitigation Factors");
        gs.info("--------------------------------------------------------------");
        if (targetedMethodCount > 0) {
            this.ScriptTestCoverage = ((testedMethodCount / targetedMethodCount) * 100.0).toFixed(2);
            gs.info("ScriptTestCoverage: " + this.ScriptTestCoverage + "%");
        }

        if (this.TotalLogic > 0) {
            gs.info("NumberOfActiveCodelessTestSteps: " + this.stats.ActiveCodelessSteps);
            gs.info("NumberOfActiveScriptedTestSteps: " + this.stats.ActiveScriptedSteps);

            // Black-box Test Mitigation Metric
            this.CodelessTestRatio = (this.stats.ActiveCodelessSteps /
                (this.TotalLogic - this.libFileCount)).toFixed(2);
            gs.info("CodelessTestRatio: " + this.CodelessTestRatio);
        }
        if (this.stats.CodeCharCount > 0) {

            // All Scripts
            this.CommentPercentage = ((this.stats.CommentCharCount / this.stats.CodeCharCount) * 100.0).toFixed(2);
            gs.info("CommentPercentage: " + this.CommentPercentage + "%");
        }
        if (this.state.stats.LinesOfCode > 0) {

            // White-box Test Mitigation Metric
            this.ScriptedTestRatio = (this.stats.LinesOfTestCode / this.state.stats.LinesOfCode).toFixed(2);
            gs.info("ScriptedTestRatio: " + this.ScriptedTestRatio);

            // All Scripts
            this.LogPercentage = ((this.state.stats.LogCalls / this.state.stats.LinesOfCode) * 100.0).toFixed(2);
            gs.info("LogPercentage: " + this.LogPercentage + "%");
            this.DebugPercentage = ((this.state.stats.DebugCalls / this.state.stats.LinesOfCode) * 100.0).toFixed(2);
            gs.info("DebugPercentage: " + this.DebugPercentage + "%");
            this.ExceptionPercentage = ((this.state.stats.TryStatements / this.state.stats.LinesOfCode) * 100.0).toFixed(2);
            gs.info("ExceptionPercentage: " + this.ExceptionPercentage + "%");

            // Procode, Lowcode and Library Scripts
            var codeTypes = { pro: "Pro", low: "Low", lib: "Lib" };
            for (var type in codeTypes) {
                if (this[type + "LinesOfCode"] > 0) {

                    this[codeTypes[type] + "LogPct"] = ((this[type + "LogCount"] /
                        this[type + "LinesOfCode"]) * 100.0).toFixed(2);
                    gs.info("LogPct: " + this[codeTypes[type] + "LogPct"] + "%");
                    this[codeTypes[type] + "DebugPct"] = ((this[type + "DebugCount"] /
                        this[type + "LinesOfCode"]) * 100.0).toFixed(2);
                    gs.info("DebugPct: " + this[codeTypes[type] + "DebugPct"] + "%");
                    this[codeTypes[type] + "ExceptionPct"] = ((this[type + "ExceptionCount"] /
                        this[type + "LinesOfCode"]) * 100.0).toFixed(2);
                    gs.info("ExceptionPct: " + this[codeTypes[type] + "ExceptionPct"] + "%");
                    this[codeTypes[type] + "CommentPct"] = ((this[type + "CommentChars"] /
                        this[type + "CodeChars"]) * 100.0).toFixed(2);
                    gs.info("CommentPct: " + this[codeTypes[type] + "CommentPct"] + "%");
                }
            }
        }
        else {
            gs.info("No executable lines of code scanned. Nothing to report on log, debug and exception handling percentages.");
        }

        if (this.state.processingPackages) {
            gs.info("");
            gs.info("Raw Test and Logging Data:");
            gs.info("--------------------------------------------------------------");
            this.NumberOfScriptsTested = testedMethodCount;
            gs.info("NumberOfScriptsTested: " + testedMethodCount);
            gs.info("NumberOfActiveScriptedTestSteps: " + this.stats.ActiveScriptedSteps);
            gs.info("NumberOfActiveCodelessTestSteps: " + this.stats.ActiveCodelessSteps);
            gs.info("LogCallCount: " + this.state.stats.LogCallCount);
            gs.info("DebugCallCount: " + this.state.stats.DebugCallCount);
        }

        gs.info("");
        gs.info("Raw Source Code Data:");
        gs.info("--------------------------------------------------------------");
        gs.info("NoCommentFileCount: " + this.stats.NoCommentFileCount);
        for (var p in this.state.stats) {
            if (p.indexOf("inventory") == -1) {
                gs.info(p + ": " + this.state.stats[p]);
            }
        }
    },

    _persistToDatabase: function () {

        //
        // Dump to database
        // 1. Iterate through the metric fields in the table, looking for metrics in 
        // the scanner whos lables match the field labels
        // 2. Dump the raw record counts as a JSON string
        //

        var resultsInitialized = true;
        if (!this.state.resultsGR) {
            resultsInitialized = false;
            this.state.resultsGR = new GlideRecord("x_snc_dk_valid_res_metrics");
            this.state.resultsGR.instance = "https://" + gs.getProperty("instance_name") + ".service-now.com";
            this.state.resultsGR.started = this.stats.startedAt;
            this.state.resultsGR.run_description = this.stats.description;
        }

        var fields = new GlideRecord('sys_dictionary');
        fields.addEncodedQuery("name=x_snc_dk_valid_res_metrics^elementNOT LIKEsys_^element!=transmitted^element!=started^element!=instance^element!=scan_duration^element!=number^internal_type!=collection");
        fields.query();
        while (fields.next()) {

            // The labels of the fields in the table are configured to match
            //	the variable names in this code 
            if (this[fields.column_label]) {
                this.state.resultsGR[fields.element] = this[fields.column_label];
            }
            else if (this.stats[fields.column_label]) {
                this.state.resultsGR[fields.element] = this.stats[fields.column_label];
            }
            else if (this.state.stats[fields.column_label]) {
                this.state.resultsGR[fields.element] = this.state.stats[fields.column_label];
            }
        }

        var allScriptsOutput = "";
        for (var tableName in this.state.stats.inventory) {
            if (this.state.stats.inventory[tableName].LinesOfCode > 0) {
                allScriptsOutput += tableName + "\n";
                allScriptsOutput += "\tLines Of Code: " +
                    this.state.stats.inventory[tableName].LinesOfCode + "\n";
                allScriptsOutput += "\tAggregate Script Size: " +
                    this.state.stats.inventory[tableName].ScriptSize + "\n";
                allScriptsOutput += "\tException Handler Count: " +
                    this.state.stats.inventory[tableName].try_catch + "\n";
                allScriptsOutput += "\tLog Count: " +
                    this.state.stats.inventory[tableName].logging + "\n";
                allScriptsOutput += "\tDebug Count: " +
                    this.state.stats.inventory[tableName].debugging + "\n";
                allScriptsOutput += "\tScript Type: " +
                    this.state.stats.inventory[tableName].type + "\n\n";
            }
        }
        this.state.resultsGR.all_scripts = allScriptsOutput;

        var allCountsOutput = "";
        for (tableName in this.stats.inventory) {
            allCountsOutput += "\"" + tableName + "\"\n";
            allCountsOutput += "\tCount: " + this.stats.inventory[tableName].count + "\n";
            allCountsOutput += "\tScripted Count: " +
                this.stats.inventory[tableName].scripted_count + "\n";
            allCountsOutput += "\tGlobal Count: " +
                this.stats.inventory[tableName].global_count + "\n";
            allCountsOutput += "\tRecord Type: " + this.stats.inventory[tableName].type + "\n\n";
        }
        this.state.resultsGR.all_counts = allCountsOutput;
        var endedAt = gs.hoursAgo(0);

        var durationMS = new GlideDateTime(endedAt).getNumericValue() -
            new GlideDateTime(this.stats.startedAt).getNumericValue();
        this.state.resultsGR.scan_duration = new GlideDuration(durationMS);
        gs.info("Duration (min): " + durationMS / (1000 * 60));
        this.state.resultsGR.package_format = this.state.format;
        this.state.resultsGR.package_query = this.state.query;
        this.state.resultsGR.progress = 100; // 100%
        this.state.resultsGR.status = this.state.status;
        if (this.state.processingPackages)
            this.state.resultsGR.validation_result = this.Result;
        this.state.resultsGR.checksum = this.stats.checksum >>> 0;

        // Random artifacts for inspection
        if (this.state.inspectableLists.active) {
            this._persistRandomSampleSets();
        }

        if (resultsInitialized) {
            // I know this will insert if record didn't exist. Call me paranoid.
            this.state.resultsGR.update();
        }
        else {
            this.state.resultsGR.insert();
        }
    },


    _tallyPrimaryAppFiles: function (fileType) {


        switch (fileType) {
            case "sys_script_include":
                //"Script Include":
                this.ScriptIncludes = this.stats.inventory[fileType].count;
                this.libLinesOfCode += this.state.stats.inventory[fileType].LinesOfCode;
                this.libCommentChars += this.state.stats.inventory[fileType].commentChars;
                this.libCodeChars += this.state.stats.inventory[fileType].codeChars;
                this.libLogCount += this.state.stats.inventory[fileType].logging;
                this.libDebugCount += this.state.stats.inventory[fileType].debugging;
                this.libExceptionCount += this.state.stats.inventory[fileType].try_catch;
                this.libFileCount += this.stats.inventory[fileType].count;
                break;
            case "sys_script":
                // "Business Rule":
                this.BusinessRules = this.stats.inventory[fileType].count;
                break;
            case "sys_script_global": // Artificial class name, treat like a Script Include
                // "Global Business Rule":
                this.GlobalBusinessRules = this.stats.inventory[fileType].count;
                this.libLinesOfCode += this.state.stats.inventory[fileType].LinesOfCode;
                this.libCommentChars += this.state.stats.inventory[fileType].commentChars;
                this.libCodeChars += this.state.stats.inventory[fileType].codeChars;
                this.libLogCount += this.state.stats.inventory[fileType].logging;
                this.libDebugCount += this.state.stats.inventory[fileType].debugging;
                this.libExceptionCount += this.state.stats.inventory[fileType].try_catch;
                this.libFileCount += this.stats.inventory[fileType].count;
                break;
            case "sysevent_script_action":
                // "Script Action":
                this.ScriptActions = this.stats.inventory[fileType].count;
                break;
            case "sysauto_script":
                // "Scheduled Job":
                this.ScheduledJobs = this.stats.inventory[fileType].count;
                break;
            case "sys_filter_option_dynamic":
                // "Dynamic Filter Options":
                this.DynamicFilters = this.stats.inventory[fileType].count;
                break;
            case "sys_script_email":
                // "Notification":
                this.Notifications = this.stats.inventory[fileType].count;
                break;
            case "sysevent_in_email_action":
                // "Inbound Email Actions":
                this.InboundEmailActions = this.stats.inventory[fileType].count;
                break;
            case "sys_relationship":
                // "Relationship":
                this.Relationships = this.stats.inventory[fileType].count;
                break;
            case "sys_processor":
                // "Processor":
                this.Processors = this.stats.inventory[fileType].count;
                break;
            case "sys_ui_macro":
                // "Macro":
                this.UIMacros = this.stats.inventory[fileType].count;
                break;
            case "sys_ui_page":
                // "UI Page":
                this.UIPages = this.stats.inventory[fileType].count;
                break;
            case "sys_ui_script":
                // "UI Script":
                this.UIScripts = this.stats.inventory[fileType].count;
                break;
            case "sys_script_client":
                // "Client Script":
                this.ClientScripts = this.stats.inventory[fileType].count;
                break;
            case "sys_script_fix":
                // "Fix Script":
                this.FixScripts = this.stats.inventory[fileType].count;
                break;
            case "wf_activity":
                // "Workflow Activity"
                this.WorkflowActivities = this.stats.inventory[fileType].count;
                break;
            case "sys_dictionary_override":
                // "Dictionary Entry Override":
                this.DictionaryOverrides = this.stats.inventory[fileType].count;
                break;
            case "sys_dictionary":
                // "Dictionary":
                this.Dictionary = this.stats.inventory[fileType].count;
                break;

            // ATF tests

            case "sys_atf_step":
                // "Test Step":
                // These are all defined Test Steps. Some may NOT be active because
                // their parent test is inactive
                this.TestSteps = this.stats.inventory[fileType].count;
                break;
            case "sys_atf_test":
                // "Test":
                // These are only active Tests
                this.ActiveTests = this.stats.inventory[fileType].count;
                break;

            default:
                break;
        }
    },

    _markTransmitted: function () {

        this.state.resultsGR.transmitted = true;
        this.state.resultsGR.update();

    },

    _determineResult: function () {
        this.Result = "Pass";

        // Simple, results must all meet minimum thresholds
        if (this.CodelessTestRatio < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.codeless_test_ratio"))) {
            this.Result = "Fail";
            return;
        }
        if (this.ScriptedTestRatio < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.scripted_test_ratio"))) {
            this.Result = "Fail";
            return;
        }
        if (this.ScriptTestCoverage < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.script_test_coverage"))) {
            this.Result = "Fail";
            return;
        }
        if (this.ScopedPackagingPct < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.scoped_package_pct"))) {
            this.Result = "Fail";
            return;
        }
        if (this.LibExceptionPct < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.defense.lib.exception"))) {
            this.Result = "Fail";
            return;
        }
        if (this.LibLogPct < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.defense.lib.log"))) {
            this.Result = "Fail";
            return;
        }
        if (this.LibDebugPct < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.defense.lib.debug"))) {
            this.Result = "Fail";
            return;
        }
        if (this.LibCommentPct < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.defense.lib.comment"))) {
            this.Result = "Fail";
            return;
        }
        if (this.ProExceptionPct < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.defense.pro.exception"))) {
            this.Result = "Fail";
            return;
        }
        if (this.ProLogPct < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.defense.pro.log"))) {
            this.Result = "Fail";
            return;
        }
        if (this.ProDebugPct < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.defense.pro.debug"))) {
            this.Result = "Fail";
            return;
        }
        if (this.ProCommentPct < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.defense.pro.comment"))) {
            this.Result = "Fail";
            return;
        }
        if (this.LowExceptionPct < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.defense.low.exception"))) {
            this.Result = "Fail";
            return;
        }
        if (this.LowLogPct < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.defense.low.log"))) {
            this.Result = "Fail";
            return;
        }
        if (this.LowDebugPct < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.defense.low.debug"))) {
            this.Result = "Fail";
            return;
        }
        if (this.LowCommentPct < parseFloat(gs.getProperty("x_snc_dk_valid_res.criteria.min.defense.low.comment"))) {
            this.Result = "Fail"; 
            return;
        }
    },

    _persistRandomSampleSets: function () {

        function genRandomSampleIndex(sample_indexes, set_size) {
            var maxLoop = 100;
            var retval = 0;
            do {
                maxLoop--;
                retval = Math.floor(Math.random() * set_size);
            }
            while (sample_indexes[retval] && maxLoop > 0);

            sample_indexes[retval] = true;
            return retval;
        }

        function saveSet(set_name, field_name_prefix, state, stats) {

            function getItemURL(sys_id) {
                var af = new GlideRecord("sys_metadata");
                if (af.get(sys_id)) {

                    var url = "https://" + gs.getProperty("instance_name") + ".service-now.com/nav_to.do?uri=" +
                        af.sys_class_name.toString() +
                        ".do?sys_id=" +
                        sys_id;

                    return url;
                }
                return "";

            }

            try {

                var sampleIndexes = {}; // needed to make sure all sample points are unique
                var url = "";
                var i = 0; // index for save loops
                var setSize = state.inspectableLists[set_name].length;
				gs.info("Set size for " + set_name + " is " + setSize);
                if (setSize <= stats.inspectionSampleSize) {

                    //
                    // Save out everything we got
                    //

                    for (i = 0; i < setSize; i++) {

                        url = getItemURL(state.inspectableLists[set_name][i]);

                        // GlideRecord file names start with 1, not 0
                        // GlideRecord field naming convension is <field>_<index>, index = 1..max
                        state.resultsGR[field_name_prefix + "_" + (i + 1).toString()] = url;
                    }

                }
                else if (setSize < 2 * stats.inspectionSampleSize) {

                    // 
                    // Select what not save out
                    //


                    for (i = 0; i < setSize - stats.inspectionSampleSize; i++) {
                        genRandomSampleIndex(sampleIndexes, setSize);
                    }
                    var j = 1; // suffix for gliderecord field name
                    for (i = 0; i < stats.inspectionSampleSize; i++) {

                        if (sampleIndexes[i]) {
                            continue;
                        }

                        url = getItemURL(state.inspectableLists[set_name][i]);

                        // GlideRecord file names start with 1, not 0
                        state.resultsGR[field_name_prefix + "_" + j.toString()] = url;
                        j++;
                    }

                }
                else {

                    // 
                    // Select what to save out
                    //

                    for (i = 0; i < stats.inspectionSampleSize; i++) {

                        var selectionIdx = genRandomSampleIndex(sampleIndexes, setSize);
                        url = getItemURL(state.inspectableLists[set_name][selectionIdx]);

                        // GlideRecord file names start with 1, not 0
                        state.resultsGR[field_name_prefix + "_" + (i + 1).toString()] = url;
                    }
                }
            }
            catch (e) {
                gs.error("Failure saving inspection items. Error: " + e);
            }
        }

        // Naming Convension:
        // These field name prefixes MUST MATCH what is in the results GlideRecord schema
        saveSet("ootbScriptUpdates", "script", this.state, this.stats);
        saveSet("commentedScripts", "commented", this.state, this.stats);
        saveSet("loggingScripts", "logging", this.state, this.stats);
        saveSet("whiteBoxTests", "scripted_test", this.state, this.stats);
        saveSet("blackBoxTests", "test", this.state, this.stats);
    },

    type: 'Output'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>dave.knight</sys_created_by>
        <sys_created_on>2018-10-22 13:19:48</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>0e93c9314fdda340ea338e328110c788</sys_id>
        <sys_mod_count>43</sys_mod_count>
        <sys_name>Output</sys_name>
        <sys_package display_value="Validator" source="x_snc_dk_validator">65ec1ebc4f37df40ea338e328110c714</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Validator">65ec1ebc4f37df40ea338e328110c714</sys_scope>
        <sys_update_name>sys_script_include_0e93c9314fdda340ea338e328110c788</sys_update_name>
        <sys_updated_by>dave.knight</sys_updated_by>
        <sys_updated_on>2018-12-18 03:36:18</sys_updated_on>
    </sys_script_include>
</record_update>
